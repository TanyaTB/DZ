Цена доверия к коду: Как принципы тестирования могли предотвратить катастрофы Therac-25 и Boeing 737 MAX
Истории Therac-25 и Boeing 737 MAX стали хрестоматийными примерами того, как фатальные ошибки в программном обеспечении, усугубленные недостатками в процессах тестирования и верификации, приводят к человеческим трагедиям и подрыву доверия к технологиям. Несмотря на разрыв в десятилетия и сферу применения, эти случаи объединяют системные просчеты в обеспечении безопасности. Анализ этих катастроф позволяет выделить ключевые принципы тестирования, которые, будучи примененными своевременно, могли бы их предотвратить.

Краткий обзор случаев
Therac-25 (1985-1987): Серия из шести известных случаев переоблучения пациентов, приведших к тяжелым травмам и смертям. Аппарат для лучевой терапии, управляемый программно, из-за ошибки в коде (состояние гонки — race condition) и неадекватных механизмов защиты вводил пациентам дозы радиации, в сотни раз превышающие терапевтические.

Boeing 737 MAX (2018-2019): Две катастрофы самолетов (Lion Air 610 и Ethiopian Airlines 302), унесшие 346 жизней. Причиной стало некорректное срабатывание системы MCAS (Maneuvering Characteristics Augmentation System), которая, получая неверные данные от единственного датчика угла атаки, автоматически и необратимо наклоняла нос самолета вниз, пока пилоты не теряли управление.

Принципы тестирования, которые могли бы предотвратить проблемы
Обе катастрофы были вызваны не просто единичными «багами», а комплексным провалом в культуре безопасности, проектирования и, что ключевое, — в тестировании. Следующие принципы являются прямым ответом на выявленные недостатки.

1. Независимое и всестороннее тестирование требований (Requirements-Based Testing)

Проблема: В обоих случаях требования к системе были flawed (ошибочными) или неполными.

Therac-25: Требование к безопасности «не допустить переоблучения» было реализовано на программном, а не на аппаратном уровне. Тестирование проверяло, работает ли программа в норме, но не искало, что происходит при сбоях.

737 MAX: Требование к MCAS — изменить характеристики устойчивости самолета — было реализовано с критическими упущениями: система активировалась по показаниям одного датчика, могла срабатывать многократно и имела чрезмерный авторитет, перекрывая команды пилотов.

Решение: Тестирование должно начинаться с критической проверки самих требований. Независимая группа тестировщиков (не вовлеченная в написание кода) должна была бы задать вопросы:

«Что произойдет, если датчик выйдет из строя?»

«Как система поведет себя при одновременном нажатии кнопки „лечить“ и быстром перемещении стола?»

«Почему у MCAS такой высокий авторитет и почему нет резервирования датчиков?»

2. Тестирование в условиях сбоев (Failure Mode and Effects Analysis — FMEA)

Проблема: Тестирование проводилось преимущественно в «идеальных» условиях. Реальные же сбои оборудования, которые и triggered (запустили) катастрофы, не моделировались и не рассматривались как вероятные сценарии.

Therac-25: Ошибка возникала только при очень специфической и быстрой последовательности действий оператора — сценарий, который, вероятно, не был включен в тест-кейсы.

737 MAX: Поведение MCAS при отказе одного датчика угла атаки не было должным образом протестировано и отражено в инструкциях для пилотов.

Решение: Обязательное проведение FMEA — систематического анализа всех возможных точек отказа и их последствий. Для каждого компонента (датчик, переключатель, таймер) необходимо создать тест-кейсы, моделирующие:

Его отказ.

Предоставление им неверных данных.

Его задержку в response (ответе).
Это выявляет уязвимости, которые невозможно найти при «счастливом пути» (happy path testing).

3. Интеграционное и системное тестирование с акцентом на взаимодействие (Integration Testing)

Проблема: Тестирование компонентов по отдельности не выявляет системных рисков, возникающих при их взаимодействии.

Therac-25: Интерфейс оператора, аппаратная часть и управляющий код тестировались не в достаточной интеграции. Ошибка была именно в непредусмотренном взаимодействии быстрого ввода команд и работы многозадачной системы.

737 MAX: MCAS не рассматривалась как критическая система полного контроля (flight-critical), а скорее как дополнительный модуль. Ее интеграция с другими системами управления и, что важнее, с пилотами была протестирована неадекватно.

Решение: Максимальный акцент на интеграционное тестирование, где проверяется совместная работа всех компонентов системы и внешних интерфейсов (включая человека-оператора). Необходимо тестировать не только штатные, но и нештатные сценарии взаимодействия.

4. Регрессионное тестирование и контроль изменений (Regression Testing & Change Control)

Проблема: В случае с Therac-25, программное обеспечение было перенесено с более старых моделей (Therac-20), где были аппаратные блокировки безопасности. В новой модели эти блокировки убрали, переложив их функцию на код, но регрессионное тестирование не выявило, что старая ошибка (которая на Therac-20 была безобидной из-за аппаратной защиты) теперь стала смертельно опасной.

Решение: Любое изменение в системе (аппаратное или программное) должно запускать полный цикл регрессионного тестирования, особенно сценариев, связанных с безопасностью. Удаление любого уровня защиты (даже дублирующей) должно быть самым тщательным образом проанализировано и протестировано.

5. Прозрачность и документация для пользователя (User Transparency Testing)

Проблема: В обеих историях операторы (медсестры, пилоты) не понимали, что делает система и почему.

Therac-25: Сообщение об ошибке «Malfunction 54» было неинформативным и могло быть проигнорировано.

737 MAX: Пилоты не знали о существовании MCAS, а процедура восстановления управления после ее некорректного срабатывания не была отработана и доведена до них.

Решение: Частью тестирования должна быть валидация взаимодействия с пользователем. Тест-кейсы должны проверять:

Понятна ли диагностическая информация?

Достаточно ли у оператора информации и полномочий, чтобы взять управление на себя?

Соответствуют ли инструкции реальному поведению системы в аварийных режимах?

Заключение
Трагедии Therac-25 и Boeing 737 MAX — это не просто истории о плохом коде. Это истории о недостаточной культуре безопасности, где тестирование рассматривалось как формальность для проверки заведомо рабочих сценариев, а не как глубокий, скептический и непрерывный процесс поиска слабых мест.

Внедрение принципов всестороннего тестирования требований, анализа отказов, глубокой интеграционной проверки и прозрачности для пользователя создает систему «защиты от дурака» — не только от ошибок оператора, но и, что гораздо важнее, от ошибок проектировщиков и программистов. Эти принципы требуют ресурсов, времени и независимости команд тестирования, но, как показала история, цена их игнорирования неизмеримо высока. Безопасность критических систем — это не функция, которую можно добавить по завершении проекта; это фундаментальный принцип, который должен пронизывать каждый этап их создания, и тестирование является его главным гарантом.
Чек-лист: Тестирование формы регистрации

Приложение: [название приложения]
Версия: [например, 2.1.0]
Среда:[ браузер/ОС/устройство]

---

1. Валидация полей (Позитивные и негативные сценарии)

| № | Сценарий | Входные данные | Ожидаемый результат | Статус  |
| :--- | :--- | :--- | :--- | :--- |
| **1.1** | **Эл. почта (Email)** | | | |
| 1.1.1 | Валидный email | `test@example.com` | Принимается, ошибок нет | |
| 1.1.2 | Email без домена | `test@` | Сообщение об ошибке "Неверный формат email" | |
| 1.1.3 | Email без @ | `test.example.com` | Сообщение об ошибке "Неверный формат email" | |
| 1.1.4 | Пустое поле | [Оставить пустым] | Сообщение об ошибке "Поле обязательно для заполнения" | |
| 1.1.5 | Email, который уже зарегистрирован | `existing_user@mail.com` | Сообщение об ошибке "Пользователь с таким email уже существует" | |
| **1.2** | **Пароль** | | | |
| 1.2.1 | Валидный пароль (соответствует политике) | `StrongPass123!` | Принимается, ошибок нет | |
| 1.2.2 | Пароль короче минимальной длины | `Short1!` | Сообщение об ошибке "Пароль должен быть не менее 8 символов" | |
| 1.2.3 | Пароль без цифр | `WeakPassword!` | Сообщение об ошибке "Пароль должен содержать хотя бы одну цифру" | |
| 1.2.4 | Пароль без спец. символа | `WeakPassword123` | Сообщение об ошибке "Пароль должен содержать хотя бы один спец. символ (!@#$...)" | |
| 1.2.5 | Пустое поле | [Оставить пустым] | Сообщение об ошибке "Поле обязательно для заполнения" | |
| 1.2.6 | **Подтверждение пароля** | | | |
| 1.2.7 | Пароли совпадают | `Pass123!` / `Pass123!` | Принимается, ошибок нет | |
| 1.2.8 | Пароли не совпадают | `Pass123!` / `OtherPass456!` | Сообщение об ошибке "Пароли не совпадают" | |
| **1.3** | **Имя пользователя (Username)** | | | |
| 1.3.1 | Валидное имя | `john_doe_22` | Принимается, ошибок нет | |
| 1.3.2 | Имя с запрещенными символами | `john$%doe` | Сообщение об ошибке "Можно использовать только буквы, цифры и _" | |
| 1.3.3 | Имя, которое уже занято | `admin` | Сообщение об ошибке "Это имя пользователя уже занято" | |
| 1.3.4 | Пустое поле | [Оставить пустым] | Сообщение об ошибке "Поле обязательно для заполнения" | |

2. Функциональность формы и UX

| № | Сценарий | Ожидаемый результат | Статус () |
| :--- | :--- | :--- | :--- |
| **2.1** | **Основной поток (Happy Path)** | | |
| 2.1.1 | Заполнение всех полей валидными данными -> Нажатие "Зарегистрироваться" | 1. Показать индикатор загрузки.<br>2. Перенаправить на страницу подтверждения email/личный кабинет.<br>3. Письмо для подтверждения email отправлено. | |
| **2.2** | **Взаимодействие** | | |
| 2.2.1 | Нажатие "Зарегистрироваться" с пустыми полями | Появляются сообщения об ошибках для всех обязательных полей. | |
| 2.2.2 | Ввод данных в поле -> исправление ошибки | Сообщение об ошибке исчезает после ввода валидных данных. | |
| 2.2.3 | Наличие иконки "глаз" для показа/скрытия пароля | При нажатии на иконку символы пароля отображаются/маскируются. | |
| 2.3.4 | Работа ссылки "Уже есть аккаунт? Войти" | Перенаправление на страницу входа. | |
| **2.3** | **Валидация на лету (если есть)** | | |
| 2.3.1 | Ввод невалидного email (после ухода из поля - `onBlur`) | Сообщение об ошибке появляется сразу, не дожидаясь отправки формы. | |
| 2.3.2 | Ввод валидного пароля (после ухода из поля - `onBlur`) | Появление "зеленой" галочки или текста, что пароль надежен. | |

3. Визуальное и нефункциональное тестирование

| № | Сценарий | Ожидаемый результат | Статус  |
| :--- | :--- | :--- | :--- |
| **3.1** | **Внешний вид (Layout)** | | |
| 3.1.1 | Отображение формы на мобильном устройстве | Все элементы адаптивны, кнопки и поля удобны для тапа. | |
| 3.1.2 | Отображение формы на десктопе | Форма centered, читаемая, не растянута. | |
| 3.1.3 | Сообщения об ошибках | Выделены красным цветом, понятны пользователю. | |
| **3.2** | **Безопасность** | | |
| 3.2.1 | Пароль в поле "Пароль" | По умолчанию скрыт символами (••••••••). | |
| 3.2.2 | Отправка формы по HTTPS | В адресной строке браузера отображается замок. | |
| **3.3** | **Производительность** | | |
| 3.3.1 | Задержка при отправке формы (имитация медленной сети) | Отображается спиннер/лоадер, форма не позволяет отправить данные повторно. | |

 4. Интеграционное тестирование

| № | Сценарий | Ожидаемый результат | Статус () |
| :--- | :--- | :--- | :--- |
| **4.1** | **Письмо для подтверждения email** | | |
| 4.1.1 | Письмо получено на указанный ящик | Тема и sender выглядят корректно. | |
| 4.1.2 | Ссылка для подтверждения в письме | Клик по ссылке активирует аккаунт и перенаправляет в приложение. | |
| 4.1.3 | Повторная отправка письма | В интерфейсе есть кнопка "Отправить письмо повторно", она работает. | |
| **4.2** | **Регистрация через социальные сети (OAuth)** | | |
| 4.2.1 | Нажатие "Продолжить с Google/Facebook" | Открывается pop-up окно для авторизации у провайдера. | |
| 4.2.2 | Успешная авторизация у провайдера | Пользователь создается в системе, происходит автоматический вход. | |

Результат тестирования: [Общий вывод, например, "25/30 тестов пройдены успешно. Критические ошибки: ..."]
Тестировщик [имя/ник]
Дата:[Дата проведения тестирования]
